# https://taskfile.dev
version: '3'

# Global variables
vars:
  FLAKE_PATH: '{{.FLAKE_PATH | default "."}}'
  HOSTNAME: '{{.HOSTNAME | default "nixos"}}'
  FLAKE_REF: '{{.FLAKE_PATH}}#{{.HOSTNAME}}'
  
# Include modular task files
includes:
  setup: ./tasks/setup.yml
  git: ./tasks/git.yml
  v2ray: ./tasks/v2ray.yml

# Environment variables
env:
  NIXOS_OZONE_WL: '1'

# Default task when running just 'task'
tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list-all

  # ========================
  # Core NixOS Operations
  # ========================
  
  rebuild:
    desc: "Rebuild NixOS configuration (switch)"
    summary: |
      Rebuild and switch to the new NixOS configuration.
      This is the most common operation for applying changes.
    cmds:
      - task: git:check-dirty
      - sudo nixos-rebuild switch --flake {{.FLAKE_REF}} {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'
    preconditions:
      - sh: test -f flake.nix
        msg: "flake.nix not found in current directory"

  rebuild:test:
    desc: "Test NixOS configuration without switching"
    cmds:
      - task: git:check-dirty
      - sudo nixos-rebuild test --flake {{.FLAKE_REF}} {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  rebuild:boot:
    desc: "Rebuild NixOS configuration (boot)"
    summary: |
      Rebuild configuration and set as boot default without switching.
      The new configuration will be used after next reboot.
    cmds:
      - task: git:check-dirty
      - sudo nixos-rebuild boot --flake {{.FLAKE_REF}} {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  rebuild:dry:
    desc: "Dry run of NixOS rebuild"
    cmds:
      - sudo nixos-rebuild dry-build --flake {{.FLAKE_REF}} {{.EXTRA_ARGS}}
    vars:
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'

  rebuild:trace:
    desc: "Rebuild with detailed error trace"
    cmds:
      - task: git:check-dirty
      - sudo nixos-rebuild switch --flake {{.FLAKE_REF}} --show-trace

  # ========================
  # Flake Management
  # ========================
  
  update:
    desc: "Update all flake inputs"
    cmds:
      - nix --extra-experimental-features 'nix-command flakes' flake update
      - task: git:add-file
        vars:
          FILE: flake.lock
      - echo "Flake inputs updated successfully"

  update:input:
    desc: "Update specific flake input"
    summary: |
      Update a specific flake input.
      Usage: task update:input INPUT=nixpkgs
    cmds:
      - nix --extra-experimental-features 'nix-command flakes' flake lock --update-input {{.INPUT}}
      - task: git:add-file
        vars:
          FILE: flake.lock
    preconditions:
      - sh: test -n "{{.INPUT}}"
        msg: "Please specify INPUT variable (e.g., task update:input INPUT=nixpkgs)"

  # ========================
  # Testing & Validation
  # ========================
  
  test:
    desc: "Run all configuration tests"
    cmds:
      - task: test:flake
      - task: test:format
      - echo "All tests passed!"

  test:flake:
    desc: "Validate flake configuration"
    cmds:
      - echo "Checking flake configuration..."
      - nix --extra-experimental-features 'nix-command flakes' flake check --no-build
    preconditions:
      - sh: test -f flake.nix
        msg: "flake.nix not found"

  test:format:
    desc: "Check Nix formatting"
    cmds:
      - |
        echo "Checking Nix file formatting..."
        if nix --extra-experimental-features 'nix-command flakes' fmt -- --check 2>/dev/null; then
          echo "  ✓ All files properly formatted"
        else
          echo "  ⚠ Formatting issues detected. Run 'task format' to fix."
          echo "  Note: This is non-critical for testing."
        fi

  format:
    desc: "Format all Nix files"
    cmds:
      - echo "Formatting Nix files..."
      - nix --extra-experimental-features 'nix-command flakes' fmt
      - echo "Formatting complete"

  # ========================
  # System Maintenance
  # ========================
  
  clean:
    desc: "Clean old generations and optimize store"
    summary: |
      Remove old system generations and optimize the Nix store.
      This helps free up disk space.
    cmds:
      - echo "Current disk usage:"
      - df -h /nix/store
      - echo ""
      - echo "Cleaning old generations..."
      - sudo nix-collect-garbage -d
      - echo ""
      - echo "Optimizing Nix store..."
      - nix-store --optimise
      - echo ""
      - echo "New disk usage:"
      - df -h /nix/store

  clean:user:
    desc: "Clean user generations"
    cmds:
      - nix-collect-garbage -d
      - echo "User generations cleaned"

  clean:keep:
    desc: "Clean but keep N generations"
    summary: |
      Clean old generations but keep the most recent N.
      Usage: task clean:keep KEEP=5
    cmds:
      - sudo nix-env --delete-generations +{{.KEEP}} --profile /nix/var/nix/profiles/system
      - sudo nix-collect-garbage
      - nix-store --optimise
    vars:
      KEEP: '{{.KEEP | default "3"}}'

  # ========================
  # System Information
  # ========================
  
  info:
    desc: "Show system information"
    cmds:
      - task: info:generation
      - echo ""
      - task: info:kernel
      - echo ""
      - task: info:flake

  info:generation:
    desc: "Show current system generation"
    cmds:
      - echo "Current system generation:"
      - sudo nix-env --list-generations --profile /nix/var/nix/profiles/system | tail -5

  info:kernel:
    desc: "Show kernel information"
    cmds:
      - echo "Kernel information:"
      - 'echo "Running: $(uname -r)"'
      - 'echo "Current: $(readlink /run/current-system/kernel | xargs basename)"'

  info:flake:
    desc: "Show flake metadata"
    cmds:
      - echo "Flake inputs:"
      - nix --extra-experimental-features 'nix-command flakes' flake metadata --json | jq -r '.locks.nodes.root.inputs | to_entries[] | "  - \(.key)"'

  # ========================
  # Rollback
  # ========================
  
  rollback:
    desc: "Rollback to previous generation"
    summary: |
      Rollback system to the previous generation.
      This is useful if the current generation has issues.
    prompt: This will rollback to the previous system generation. Continue?
    cmds:
      - sudo nixos-rebuild switch --rollback
      - echo "Rollback complete"

  rollback:to:
    desc: "Rollback to specific generation"
    summary: |
      Rollback to a specific generation number.
      Usage: task rollback:to GEN=42
    cmds:
      - sudo nix-env --switch-generation {{.GEN}} --profile /nix/var/nix/profiles/system
      - sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
    preconditions:
      - sh: test -n "{{.GEN}}"
        msg: "Please specify GEN variable (e.g., task rollback:to GEN=42)"

  # ========================
  # Development Shells
  # ========================
  
  shell:
    desc: "Enter default development shell"
    cmds:
      - nix develop

  shell:typescript:
    desc: "Enter TypeScript development shell"
    cmds:
      - nix develop .#typescript

  shell:python:
    desc: "Enter Python development shell"
    cmds:
      - nix develop .#python

  shell:rust:
    desc: "Enter Rust development shell"
    cmds:
      - nix develop .#rust

  shell:go:
    desc: "Enter Go development shell"
    cmds:
      - nix develop .#go

  # ========================
  # Quick Aliases
  # ========================
  
  r:
    desc: "Quick rebuild (alias for rebuild)"
    cmds:
      - task: rebuild

  t:
    desc: "Quick test (alias for test)"
    cmds:
      - task: test

  u:
    desc: "Quick update (alias for update)"
    cmds:
      - task: update

  c:
    desc: "Quick clean (alias for clean)"
    cmds:
      - task: clean

  # ========================
  # Help & Documentation
  # ========================
  
  help:
    desc: "Show detailed help"
    cmds:
      - |
        echo "NixOS Configuration Manager (Taskfile)"
        echo "======================================"
        echo ""
        echo "Common commands:"
        echo "  task rebuild       - Rebuild and switch configuration"
        echo "  task test         - Test configuration"
        echo "  task update       - Update flake inputs"
        echo "  task clean        - Clean old generations"
        echo "  task setup:init   - Initial system setup"
        echo ""
        echo "For all available tasks: task --list-all"
        echo "For task details: task --summary <task-name>"

  version:
    desc: "Show NixOS version"
    cmds:
      - nixos-version
      - echo ""
      - echo "Nix version:"
      - nix --version