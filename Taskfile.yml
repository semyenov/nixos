# https://taskfile.dev
version: '3'

# Global variables
vars:
  FLAKE_PATH: '{{.FLAKE_PATH | default "."}}'
  HOSTNAME: '{{.HOSTNAME | default "nixos"}}'
  FLAKE_REF: '{{.FLAKE_PATH}}#{{.HOSTNAME}}'
  
# Environment variables
env:
  NIXOS_OZONE_WL: '1'

# Default task
tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list-all

  # ========================
  # Core NixOS Operations  
  # ========================
  
  rebuild:
    desc: "Rebuild NixOS configuration (modes: switch,test,boot,dry)"
    summary: |
      Rebuild NixOS configuration with different modes:
      - switch: Apply changes immediately (default)
      - test: Test without switching boot default
      - boot: Set as boot default without immediate switch  
      - dry: Show what would be built/downloaded
      
      Usage: task rebuild [MODE=switch] [TRACE=true] [EXTRA_ARGS="..."]
    cmds:
      - cmd: git add -A
        silent: true
      - cmd: |
          {{if eq .MODE "dry"}}
            nixos-rebuild dry-activate --flake {{.FLAKE_REF}} {{.EXTRA_ARGS}}
          {{else}}
            sudo nixos-rebuild {{.MODE | default "switch"}} --flake {{.FLAKE_REF}} {{if .TRACE}}--show-trace{{end}} {{.EXTRA_ARGS}}
          {{end}}
    vars:
      MODE: '{{.MODE}}'
      TRACE: '{{.TRACE}}'
      EXTRA_ARGS: '{{.EXTRA_ARGS | default ""}}'
    preconditions:
      - sh: test -f flake.nix
        msg: "flake.nix not found in current directory"

  # Quick aliases
  r: 
    desc: "Quick rebuild (alias)"
    cmds: [task: rebuild]
  
  test:
    desc: "Run all tests (flake, format, unit)"
    cmds:
      - echo "Running comprehensive tests..."
      - task: test:flake:current
      - task: test:format  
      - task: test:unit
      - echo "✅ All tests passed"

  t:
    desc: "Quick test (alias)" 
    cmds: [task: test]

  test:flake:
    desc: "Validate flake configuration [SYSTEMS=all|current]"
    cmds:
      - cmd: echo "Checking flake configuration..."
      - cmd: |
          {{if eq .SYSTEMS "current"}}
            nix --extra-experimental-features 'nix-command flakes' flake check --no-build
          {{else}}
            nix --extra-experimental-features 'nix-command flakes' flake check --no-build --all-systems
          {{end}}
    vars:
      SYSTEMS: '{{.SYSTEMS | default "all"}}'

  test:flake:current:
    desc: "Validate flake for current system only"
    cmds: 
      - task: test:flake
        vars: {SYSTEMS: "current"}

  test:format:
    desc: "Check Nix file formatting"
    cmds:
      - echo "Checking Nix file formatting..."
      - |
        if ! nixpkgs-fmt --check $(find . -name "*.nix" -not -path "./result*" -not -path "./.direnv/*"); then
          echo "❌ Some files need formatting. Run 'task format' to fix."
          exit 1
        fi
        echo "✓ All Nix files properly formatted"

  test:unit:
    desc: "Run unit tests for modules"
    cmds:
      - echo "Running unit tests..."
      - ./scripts/run-unit-tests.sh || nix-instantiate --eval tests/unit/module-utils.nix -A result | grep -q "passed"

  test:vm:
    desc: "Run VM integration tests [TEST=all|specific]" 
    cmds:
      - cmd: echo "Running VM tests..."
      - cmd: |
          {{if eq .TEST "all"}}
            for test in tests/vm/*.nix; do
              echo "Testing: $(basename $test .nix)"
              nix-build $test --no-out-link || exit 1
            done
          {{else}}
            nix-build tests/vm/{{.TEST}}.nix --no-out-link
          {{end}}
    vars:
      TEST: '{{.TEST | default "all"}}'

  # ========================
  # Maintenance Operations
  # ========================
  
  update:
    desc: "Update flake inputs [INPUT=all|specific]"
    cmds:
      - cmd: echo "Updating flake inputs..."
      - cmd: |
          {{if eq .INPUT "all"}}
            nix flake update
          {{else}}
            nix flake update --input {{.INPUT}}
          {{end}}
      - echo "✅ Flake inputs updated"
    vars:
      INPUT: '{{.INPUT | default "all"}}'

  u:
    desc: "Quick update (alias)"
    cmds: [task: update]

  clean:
    desc: "Clean old generations [KEEP=5] and optimize store"
    cmds:
      - echo "Cleaning old generations (keeping {{.KEEP}})..."
      - sudo nix-collect-garbage --delete-older-than {{.DAYS | default "7"}}d
      - nix-collect-garbage --delete-older-than {{.DAYS | default "7"}}d  
      - sudo nix profile list --profile /nix/var/nix/profiles/system | tail -n +$(({{.KEEP | default "5"}}+1)) | cut -d' ' -f4 | xargs -r sudo nix profile remove --profile /nix/var/nix/profiles/system
      - echo "Optimizing Nix store..."
      - nix-store --optimise
      - echo "✅ Cleanup complete"
    vars:
      KEEP: '{{.KEEP}}'
      DAYS: '{{.DAYS}}'

  c:
    desc: "Quick clean (alias)"
    cmds: [task: clean]

  format:
    desc: "Format all Nix files"
    cmds:
      - echo "Formatting Nix files..."
      - nixpkgs-fmt $(find . -name "*.nix" -not -path "./result*" -not -path "./.direnv/*")
      - echo "✅ Formatting complete"

  info:
    desc: "Show system information"
    cmds:
      - echo "=== System Information ==="
      - echo "NixOS Version: $(nixos-version)"
      - "echo 'Current Generation:' && sudo nix-env --list-generations --profile /nix/var/nix/profiles/system | tail -1"
      - echo "Flake: {{.FLAKE_REF}}"
      - echo "Disk Usage:"
      - "df -h / | tail -1"
      - echo "Nix Store Size:"
      - "du -sh /nix/store 2>/dev/null | cut -f1 || echo 'N/A'"

  # ========================
  # Development Shells
  # ========================
  
  shell:
    desc: "Enter development shell [TYPE=nixos|web|systems|ops|mobile]"
    cmds:
      - nix develop .#{{.TYPE | default "nixos"}}
    vars:
      TYPE: '{{.TYPE}}'

  # ========================  
  # Git Operations
  # ========================
  
  commit:
    desc: "Commit changes [MSG='commit message']"
    cmds:
      - git add .
      - git commit -m "{{.MSG}}" -m "🤖 Generated with [Claude Code](https://claude.ai/code)" -m "Co-Authored-By: Claude <noreply@anthropic.com>"
    vars:
      MSG: '{{.MSG | default "chore: update configuration"}}'
    preconditions:
      - sh: test -n "$(git status --porcelain)"
        msg: "No changes to commit"

  status:
    desc: "Show git and system status"
    cmds:
      - echo "=== Git Status ==="
      - git status --short
      - echo ""  
      - echo "=== System Status ==="
      - echo "Current generation: $(sudo nix-env --list-generations --profile /nix/var/nix/profiles/system | tail -1)"
      - echo "Uncommitted flake changes:" 
      - git diff --name-only | wc -l

  # ========================
  # Setup Operations  
  # ========================
  
  setup:
    desc: "Full system setup [SOPS_KEY=/path/to/key]"
    cmds:
      - echo "🚀 Starting NixOS setup..."
      - task: setup:hardware
      - task: setup:sops
      - echo "✅ Setup complete! Run 'task rebuild' to apply configuration"

  setup:hardware:
    desc: "Generate hardware configuration"
    cmds:
      - echo "Generating hardware configuration..."
      - sudo nixos-generate-config --dir hosts/{{.HOSTNAME}}/
      - echo "✅ Hardware configuration generated in hosts/{{.HOSTNAME}}/"

  setup:sops:
    desc: "Setup SOPS encryption [KEY=/path/to/age/key]" 
    cmds:
      - echo "Setting up SOPS encryption..."
      - mkdir -p ~/.config/sops/age
      - |
        {{if .KEY}}
          cp {{.KEY}} ~/.config/sops/age/keys.txt
        {{else}}
          age-keygen -o ~/.config/sops/age/keys.txt
        {{end}}
      - echo "Age public key:"
      - grep public ~/.config/sops/age/keys.txt
      - echo "✅ SOPS setup complete"
    vars:
      KEY: '{{.KEY}}'

  rollback:
    desc: "Rollback to previous generation"
    cmds:
      - echo "Rolling back to previous generation..."
      - sudo nixos-rebuild switch --rollback
      - echo "✅ Rollback complete"