# V2Ray configuration tasks
version: '3'

tasks:
  config:
    desc: "Configure V2Ray from VLESS URL"
    summary: |
      Parse a VLESS connection string and create V2Ray configuration.
      The configuration will be encrypted with SOPS.
      
      Usage: task v2ray:config URL="vless://..."
    cmds:
      - task: parse-url
        vars:
          URL: '{{.URL}}'
      - task: create-secrets
    preconditions:
      - sh: test -n "{{.URL}}"
        msg: "Please provide VLESS URL (e.g., task v2ray:config URL='vless://...')"
      - sh: test -f .sops.yaml
        msg: "SOPS not configured. Run 'task setup:sops' first"

  parse-url:
    desc: "Parse VLESS URL and extract configuration"
    internal: true
    cmds:
      - |
        URL="{{.URL}}"
        
        # Validate URL format
        if [[ ! "$URL" =~ ^vless:// ]]; then
          echo "Error: Invalid VLESS URL format"
          exit 1
        fi
        
        # Extract components using sed/awk for portability
        # Format: vless://UUID@SERVER:PORT?params#name
        
        # Remove vless:// prefix
        URL_CONTENT="${URL#vless://}"
        
        # Extract UUID (before @)
        UUID=$(echo "$URL_CONTENT" | cut -d'@' -f1)
        
        # Extract server and port (between @ and ?)
        SERVER_PORT=$(echo "$URL_CONTENT" | cut -d'@' -f2 | cut -d'?' -f1)
        SERVER=$(echo "$SERVER_PORT" | cut -d':' -f1)
        PORT=$(echo "$SERVER_PORT" | cut -d':' -f2)
        
        # Extract query parameters (between ? and #)
        QUERY=""
        if [[ "$URL_CONTENT" =~ \?([^#]+) ]]; then
          QUERY="${BASH_REMATCH[1]}"
        fi
        
        # Parse query parameters
        PUBLIC_KEY=""
        SHORT_ID=""
        SNI=""
        FINGERPRINT=""
        SPX=""
        
        if [ -n "$QUERY" ]; then
          IFS='&' read -ra PARAMS <<< "$QUERY"
          for param in "${PARAMS[@]}"; do
            KEY=$(echo "$param" | cut -d'=' -f1)
            VALUE=$(echo "$param" | cut -d'=' -f2)
            case "$KEY" in
              pbk) PUBLIC_KEY="$VALUE" ;;
              sid) SHORT_ID="$VALUE" ;;
              sni) SNI="$VALUE" ;;
              fp)  FINGERPRINT="$VALUE" ;;
              spx) SPX=$(printf '%b' "${VALUE//+/ }" | sed 's/%\([0-9A-F][0-9A-F]\)/\\x\1/g' | xargs -0 printf '%b') ;;
            esac
          done
        fi
        
        # Display parsed configuration
        echo "Parsed V2Ray configuration:"
        echo "=========================="
        echo "Server:      $SERVER:$PORT"
        echo "UUID:        $UUID"
        echo "Public Key:  $PUBLIC_KEY"
        echo "Short ID:    $SHORT_ID"
        [ -n "$SNI" ] && echo "SNI:         $SNI"
        [ -n "$FINGERPRINT" ] && echo "Fingerprint: $FINGERPRINT"
        [ -n "$SPX" ] && echo "SpiderX:     $SPX"
        echo ""
        
        # Save to temporary file for next task
        cat > /tmp/v2ray_config.tmp << EOF
        SERVER=$SERVER
        PORT=$PORT
        UUID=$UUID
        PUBLIC_KEY=$PUBLIC_KEY
        SHORT_ID=$SHORT_ID
        SNI=$SNI
        FINGERPRINT=$FINGERPRINT
        SPX=$SPX
        EOF

  create-secrets:
    desc: "Create encrypted V2Ray secrets file"
    internal: true
    cmds:
      - |
        # Load parsed configuration
        if [ ! -f /tmp/v2ray_config.tmp ]; then
          echo "Error: Configuration not parsed. Run parse-url first."
          exit 1
        fi
        
        source /tmp/v2ray_config.tmp
        
        # Check if secrets file exists
        if [ -f "secrets/v2ray.yaml" ] && [ "{{.FORCE}}" != "true" ]; then
          echo "V2Ray secrets already exist."
          echo "Run with FORCE=true to overwrite."
          exit 1
        fi
        
        # Create secrets directory
        mkdir -p secrets
        
        # Create temporary YAML file
        cat > /tmp/v2ray.yaml << EOF
        # V2Ray Configuration
        # Generated from VLESS URL on $(date)
        v2ray:
          server_address: "$SERVER"
          server_port: $PORT
          user_id: "$UUID"
          public_key: "$PUBLIC_KEY"
          short_id: "${SHORT_ID:-}"
        EOF
        
        # Encrypt with SOPS
        echo "Encrypting secrets with SOPS..."
        sops -e /tmp/v2ray.yaml > secrets/v2ray.yaml
        
        # Clean up temporary files
        rm -f /tmp/v2ray_config.tmp /tmp/v2ray.yaml
        
        echo "V2Ray configuration saved and encrypted to secrets/v2ray.yaml"
        echo ""
        echo "To enable V2Ray in your configuration, add:"
        echo "  services.v2rayWithSecrets.enable = true;"
    vars:
      FORCE: '{{.FORCE | default "false"}}'

  enable:
    desc: "Enable V2Ray service in configuration"
    summary: |
      Add V2Ray service to your NixOS configuration.
      This will show you what to add to enable the service.
    cmds:
      - |
        echo "To enable V2Ray, add the following to your configuration:"
        echo ""
        echo "In hosts/nixos/configuration.nix or a custom module:"
        echo ""
        echo "  # Enable V2Ray proxy service"
        echo "  services.v2rayWithSecrets.enable = true;"
        echo ""
        echo "Make sure you have:"
        echo "1. Created V2Ray secrets: task v2ray:config URL='vless://...'"
        echo "2. Configured SOPS: task setup:sops"
        echo "3. Added the v2ray-secrets.nix module to your flake.nix"
        echo ""
        echo "After enabling, rebuild with: task rebuild"

  status:
    desc: "Check V2Ray service status"
    cmds:
      - |
        echo "V2Ray Service Status:"
        echo "===================="
        
        # Check if service is enabled
        if systemctl is-enabled v2ray-custom &>/dev/null; then
          echo "Service: Enabled ✓"
        else
          echo "Service: Disabled ✗"
          echo "Run 'task v2ray:enable' for instructions"
          exit 0
        fi
        
        # Check if service is running
        if systemctl is-active v2ray-custom &>/dev/null; then
          echo "Status:  Running ✓"
        else
          echo "Status:  Stopped ✗"
        fi
        
        echo ""
        echo "Proxy endpoints:"
        echo "  SOCKS5: localhost:1080"
        echo "  HTTP:   localhost:8118"
        
        echo ""
        echo "For detailed status:"
        echo "  sudo systemctl status v2ray-custom"
        
        echo ""
        echo "For logs:"
        echo "  sudo journalctl -u v2ray-custom -f"

  test:
    desc: "Test V2Ray proxy connection"
    summary: |
      Test if the V2Ray proxy is working correctly.
      This will attempt to connect through the proxy.
    cmds:
      - |
        echo "Testing V2Ray proxy connection..."
        echo ""
        
        # Check if service is running
        if ! systemctl is-active v2ray-custom &>/dev/null; then
          echo "Error: V2Ray service is not running"
          echo "Start it with: sudo systemctl start v2ray-custom"
          exit 1
        fi
        
        # Test SOCKS5 proxy
        echo -n "Testing SOCKS5 proxy (localhost:1080)... "
        if curl -s --socks5 localhost:1080 https://api.ipify.org &>/dev/null; then
          echo "✓"
          echo "Your IP through proxy: $(curl -s --socks5 localhost:1080 https://api.ipify.org)"
        else
          echo "✗ Failed"
        fi
        
        # Test HTTP proxy
        echo -n "Testing HTTP proxy (localhost:8118)... "
        if curl -s --proxy http://localhost:8118 https://api.ipify.org &>/dev/null; then
          echo "✓"
          echo "Your IP through proxy: $(curl -s --proxy http://localhost:8118 https://api.ipify.org)"
        else
          echo "✗ Failed"
        fi
        
        echo ""
        echo "Your real IP: $(curl -s https://api.ipify.org)"

  restart:
    desc: "Restart V2Ray service"
    cmds:
      - sudo systemctl restart v2ray-custom
      - echo "V2Ray service restarted"
      - task: status

  logs:
    desc: "Show V2Ray service logs"
    cmds:
      - sudo journalctl -u v2ray-custom -n 50 --no-pager

  logs:follow:
    desc: "Follow V2Ray service logs"
    cmds:
      - sudo journalctl -u v2ray-custom -f