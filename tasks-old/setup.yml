# Setup and initialization tasks
version: '3'

tasks:
  init:
    desc: "Complete initial NixOS setup"
    summary: |
      Perform complete initial setup including:
      - Hardware configuration generation
      - SOPS encryption setup
      - Configuration validation
      - Initial build
    cmds:
      - task: hardware
      - task: sops
      - task: validate
      - echo "Setup complete! Run 'task rebuild' to apply configuration"

  hardware:
    desc: "Generate hardware configuration"
    summary: |
      Generate hardware-configuration.nix for the current system.
      This detects your hardware and creates appropriate configuration.
    cmds:
      - |
        if [ -f "hosts/{{.HOST}}/hardware-configuration.nix" ]; then
          echo "Hardware configuration already exists."
          echo "Run with FORCE=true to regenerate."
          test "{{.FORCE}}" = "true" || exit 0
        fi
      - mkdir -p hosts/{{.HOST}}
      - sudo nixos-generate-config --dir hosts/{{.HOST}}
      - echo "Hardware configuration generated"
    vars:
      HOST: '{{.HOST | default "nixos"}}'
      FORCE: '{{.FORCE | default "false"}}'

  sops:
    desc: "Setup SOPS encryption"
    summary: |
      Setup SOPS for secret management:
      - Generate age encryption key
      - Create .sops.yaml configuration
      - Initialize secret files
    cmds:
      - task: sops:generate-key
      - task: sops:create-config
      - echo "SOPS setup complete"

  sops:generate-key:
    desc: "Generate age encryption key"
    cmds:
      - |
        KEY_FILE="$HOME/.config/sops/age/keys.txt"
        if [ -f "$KEY_FILE" ]; then
          echo "Age key already exists at $KEY_FILE"
          test "{{.FORCE}}" = "true" || exit 0
          echo "Backing up existing key..."
          cp "$KEY_FILE" "$KEY_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        mkdir -p "$(dirname "$KEY_FILE")"
        age-keygen -o "$KEY_FILE"
        echo "Age key generated at $KEY_FILE"
    vars:
      FORCE: '{{.FORCE | default "false"}}'

  sops:create-config:
    desc: "Create SOPS configuration"
    cmds:
      - |
        if [ -f ".sops.yaml" ] && [ "{{.FORCE}}" != "true" ]; then
          echo ".sops.yaml already exists"
          exit 0
        fi
        
        # Get user age key
        KEY_FILE="$HOME/.config/sops/age/keys.txt"
        if [ ! -f "$KEY_FILE" ]; then
          echo "Error: Age key not found. Run 'task setup:sops:generate-key' first"
          exit 1
        fi
        USER_KEY=$(grep "public key:" "$KEY_FILE" | cut -d: -f2 | tr -d ' ')
        
        # Get host key if available
        HOST_KEY=""
        if [ -f "/etc/ssh/ssh_host_ed25519_key.pub" ]; then
          HOST_KEY=$(ssh-to-age < /etc/ssh/ssh_host_ed25519_key.pub)
        fi
        
        # Create .sops.yaml
        cat > .sops.yaml << EOF
        # SOPS configuration
        keys:
          - &user_semyenov $USER_KEY
        $([ -n "$HOST_KEY" ] && echo "  - &host_nixos $HOST_KEY")
        
        creation_rules:
          - path_regex: secrets/[^/]+\\.(yaml|json|env|ini)$
            key_groups:
              - age:
                  - *user_semyenov
        $([ -n "$HOST_KEY" ] && echo "          - *host_nixos")
        EOF
        
        echo ".sops.yaml created"
    vars:
      FORCE: '{{.FORCE | default "false"}}'

  sops:edit-v2ray:
    desc: "Edit V2Ray secrets"
    summary: |
      Edit V2Ray secrets file with SOPS encryption.
      The file will be automatically encrypted when saved.
    cmds:
      - |
        if [ ! -f "secrets/v2ray.yaml" ]; then
          echo "Creating new V2Ray secrets file..."
          cat > secrets/v2ray.yaml.tmp << 'EOF'
        # V2Ray Configuration
        v2ray:
          server_address: "your.server.com"
          server_port: 443
          user_id: "your-uuid-here"
          public_key: "your-public-key"
          short_id: "your-short-id"
        EOF
          sops -e secrets/v2ray.yaml.tmp > secrets/v2ray.yaml
          rm secrets/v2ray.yaml.tmp
        fi
        sops secrets/v2ray.yaml
    preconditions:
      - sh: test -f .sops.yaml
        msg: "SOPS not configured. Run 'task setup:sops' first"

  validate:
    desc: "Validate complete setup"
    cmds:
      - echo "Validating setup..."
      - |
        # Check for required files
        ERRORS=0
        
        echo -n "Checking flake.nix... "
        if [ -f "flake.nix" ]; then
          echo "✓"
        else
          echo "✗ Missing"
          ERRORS=$((ERRORS + 1))
        fi
        
        echo -n "Checking hardware configuration... "
        if [ -f "hosts/nixos/hardware-configuration.nix" ]; then
          echo "✓"
        else
          echo "✗ Missing (run 'task setup:hardware')"
          ERRORS=$((ERRORS + 1))
        fi
        
        echo -n "Checking SOPS configuration... "
        if [ -f ".sops.yaml" ]; then
          echo "✓"
        else
          echo "⚠ Optional (run 'task setup:sops' if using secrets)"
        fi
        
        echo -n "Checking age key... "
        if [ -f "$HOME/.config/sops/age/keys.txt" ]; then
          echo "✓"
        else
          echo "⚠ Optional (needed for secrets)"
        fi
        
        if [ $ERRORS -gt 0 ]; then
          echo ""
          echo "Setup validation failed with $ERRORS error(s)"
          exit 1
        fi
        
        echo ""
        echo "Setup validation passed!"
      - task: test:flake

  user:add:
    desc: "Add a new user to the system"
    summary: |
      Add a new user to the NixOS configuration.
      Usage: task setup:user:add USER=username
    cmds:
      - |
        echo "Adding user {{.USER}} to configuration..."
        echo ""
        echo "Add the following to your configuration.nix:"
        echo ""
        echo "  users.users.{{.USER}} = {"
        echo "    isNormalUser = true;"
        echo "    description = \"{{.USER}}\";"
        echo "    extraGroups = [ \"networkmanager\" \"audio\" \"video\" ];"
        echo "    shell = pkgs.bash;"
        echo "  };"
        echo ""
        echo "For sudo access, add \"wheel\" to extraGroups."
    preconditions:
      - sh: test -n "{{.USER}}"
        msg: "Please specify USER variable (e.g., task setup:user:add USER=john)"

  quick:
    desc: "Quick setup for common scenarios"
    summary: |
      Quick setup with sensible defaults.
      Generates hardware config and validates the setup.
    cmds:
      - task: hardware
      - task: validate
      - echo "Quick setup complete!"
      - 'echo "Optional: Run ''task setup:sops'' for secret management"'
      - 'echo "Next: Run ''task rebuild'' to apply configuration"'